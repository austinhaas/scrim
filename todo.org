* scrim
** DONE Research
   - ielm
   - geiser
   - inf-clojure
   - https://masteringemacs.org/article/comint-writing-command-interpreter
** DONE Requirements
   - Works with standard clojure repls.
   - Works with clj and cljs.
   - Strictly minimal defaults.
   - Customizable
** DONE Non-requirements
   - Support for other repls.
   - Multiple REPLs.
     - Try to keep this option open, it is just good design after
       all, but don't complicate the single REPL case. I don't want
       to have to manage which buffer is attached to which REPL.
   - Anything that isn't essential and can be added separately.
** DONE Determine how to run clj
   - deps.edn: {:srv "clojure.server.repl={:port 5555 :accept clojure.core.server/repl}"}
   - clj -O:socket -r
** DONE Determine how to run cljs
   1. Compile code.
   2. Start java process w/ server: clj -J-Dclojure.server.repl="{:port 5555 :accept clojure.core.server/repl}"
   3. Eval cljs_repl.clj

   Something is missing. When we switch to cljs namespaces, it says that symbols are not defined
   (but it can still run them).

   To inspect communication between the client and server: ngrep -d any port 9000
** DONE Show output in the echo area.
   - message fn
   - Need to remove prompts?
** DONE Clean up starting and switching.
** DONE Clean up code around prompt.
   - https://clojure.github.io/clojure/clojure.main-api.html#clojure.main/repl
   - Prompt needs to be customizable.
** DONE Fix clearing REPL
   - Change binding.
** DONE Pretty print output
   - This should be decoupled from evaluation. We may want to pretty-print literal data.
   - Use prefix option?
     - No, just make it easier to do in the repl.
       - https://clojure.github.io/clojure/clojure.pprint-api.html#clojure.pprint/pp
** BUG: Output doesn't always show in echo area.
** BUG: One of the eval fns gets an extra newline.
** Use prepl
   - Not sure how easy this is to implement, because we might have to parse EDN in elisp.
   - Might make it easy to colorize the output by type.
** Jump to function.
   - Jump back.
   - https://github.com/clojure/clojure/blob/817abb3d0ca3b7ee80cfe17b5cfe3ea8306f0720/src/clj/clojure/repl.clj#L148
     - Can get the file and line number from (meta (resolve 'clojure.core/+)).
       - Need to use that code above to figure out how to convert that file path to one that can be
         opened in Emacs.
     - Don't know how to communicate out of band with process.
       - Do we want anything to show in the REPL?
       - How do we capture the output?
         - Can we just get the last output?
** Investigate other interesting environment-related functions
*** https://clojure.org/guides/repl/data_visualization_at_the_repl#_graphical_and_web_based_visualizations
*** pp/print-table
** Font-lock output
   - Easy if we use prepl.
   - side-effects
   - result
   - errors
   - prompt/input
** Setup additional keybindings
   - https://clojure.github.io/clojure/clojure.repl-api.html
   - Move those to a separate file.
   - Determine how best to load that.
*** DONE Change basics
    - eval innermost expression
    - eval outermost expression
*** DONE Consider using C-c r prefix for clojure.repl fns
*** DONE Show args.
*** DONE show source
    - clojure.repl/source
*** expand errors
    - clojure.repl/pst
      - Truncates
*** clojure-view-cheatsheet (in clojure-mode)
** Launch process from within Emacs
*** Fix bug w/ long inputs
    - Only happens if the process is started within emacs.
*** How to work around?
    - Option 1: Launch external process
    - Option 2: Fix it
      - Email Emacs mailing list.
        - Unlikely this will go anywhere.
    - Option 3: Workaround
      - Launch the REPL process separately.
      - Might be annoying to manage.
        - How to kill it?
      - Need to see how hard it is to run `lein repl` in a process.
        - And kill it on command.
** Add option to not count 'comment as a function when evaluating expressions inside it.
** Switch to current namespace before eval'ing fn
   - Not sure I want this. Sounds like it may be more trouble than it is worth.
** Fix issue with fontlocking very long strings in REPL.
   - Maybe a clojure-mode issue.
